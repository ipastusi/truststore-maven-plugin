File buildLog = new File(basedir, "build.log");
Scanner scanner = new Scanner(buildLog);
List buildLogContent = new ArrayList();

while(scanner.hasNextLine()) {
    buildLogContent.add(scanner.nextLine());
}

List expectedBuildLogContent = new ArrayList();
expectedBuildLogContent.add("[INFO] Generating BCFKS truststore with custom Scrypt parameters:");
expectedBuildLogContent.add("[INFO] Downloading certificates through TLS handshake from server: dns.google.com/8.8.8.8:443");

boolean contentFound = buildLogContent.containsAll(expectedBuildLogContent);

if (!contentFound) {
    throw new RuntimeException("Content not found!");
}

// keytool asserts

File targetDir = new File(basedir, "target");
String targetDirAbsolutePath = targetDir.getAbsolutePath();

List expectedKeytoolOutput = new ArrayList();
expectedKeytoolOutput.add("Keystore type: BCFKS");
expectedKeytoolOutput.add("89:3c:56:46:8f:7b:4c:24:f8:03:17:d2:70:05:6a:5b");
expectedKeytoolOutput.add("7d:5b:51:26:b4:76:ba:11:db:74:16:0b:bc:53:0d:a7");
expectedKeytoolOutput.add("01:fd:6d:30:fc:a3:ca:51:a8:1b:bc:64:0e:35:03:2d");
expectedKeytoolOutput.add("04:e1:e7:a4:dc:5c:f2:f3:6d:c0:2b:42:b8:5d:15:9f");
expectedKeytoolOutput.add("05:57:c8:0b:28:26:83:a1:7b:0a:11:44:93:29:6b:79");

String command = "keytool -list -keystore " + targetDirAbsolutePath + "/property_configured_truststore.bcsfks -storepass topsecret -storetype bcfks -providerpath " + targetDirAbsolutePath + "/../../../../bin/bcprov-jdk18on-1.80.jar -provider org.bouncycastle.jce.provider.BouncyCastleProvider";

Scanner scanner = new Scanner(Runtime.getRuntime().exec(command).getInputStream()).useDelimiter("\\A");
String keytoolOutput = scanner.hasNext() ? scanner.next() : "";
for (String expectedOutput : expectedKeytoolOutput) {
    if (keytoolOutput.toLowerCase().contains(expectedOutput.toLowerCase())) {
        System.out.println("Expected output '" + expectedOutput + "' found");
    } else {
        throw new RuntimeException("Expected output '" + expectedOutput + "' not found\n" + keytoolOutput);
    }
}
